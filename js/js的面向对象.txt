1. 构造函数(类), 原型对象, 实例对象

   var Point = function(){
       function Point(x, y){
          this.x = x;
          this.y = y;
          Point.addCount();
       }
       Point.prototype.paint = function(){
           console.log(`x = ${this.x}, y = ${this.y}`);
       };
       Point.count = 0;
       Point.addCount = function (){
          this.count++;
       };
       Point.showCount = function (){
           return this.count;
       };
       return Point;
   }();


   ------- 构造函数(类) Point -------
   Point                   // 构造函数(或者叫类)
   Point.count             // 类Point的静态属性
   Point.addCount()        // 类Point的静态方法,
                              其中this.count等价于Point.count
   new Point().count       // 会显示undefined, 因为属性count定义在类Point上所有Point的实例对象无法访问

   ------- 类Point的原型对象 -------
   Point.prototype          // 类Point的原型对象, 它上面定义的所有属性和方法会被Point的所有实例共享
   new Point(1,2).paint()   // 定义在原型对象Point.prototype上的方法,
                              其中this指代的类Point的实例对象

   ------- 类Point的实例对象 -------
   new Point(3,5)            // 类Point的实例对象,
                                继承所有定义在Point.prototype的属性和方法


2. this和super的用法

    class Point{
       static count = 0;
       static showCount(){
                  return this.count;
       }
       constructor(x, y){
         this.x = x;
         this.y = y;
         Point.count++;
       }
       paint(){
          console.log(`x = ${this.x}, y = ${this.y}`);
       }
       draw(){
          return `x = ${this.x}, y = ${this.y}`
       }
    }
    class D3Point extends Point{
        constructor(x, y, z){
           super(x, y);
           this.z = z;
        }
        draw(){
           return `${super.draw()}, z = ${this.z}`;
        }
        static d3Count(){
           return `${super.showCount() * 3}`
        }
    }

   1) 非static方法, 都定义在class的原型对象prototype上
      new Point(1, 2).paint()                                 // 定义在类Point的原型对象Point.prototype

   2) static方法, 都定义在class上
      Point.showCount()                                       // 定义在类Point上

   3) this的用法
                   直接通过父类调用  new Point(1,3).paint()        // this指的是父类的实例对象
      非静态方法
                   通过子类调用     new D3Point(3,3,3).paint()     //  this指的是子类的实例对象

                   直接通过父类调用  Point.showCount()              // this指的是父类Point
      静态方法
                   通过子类调用      D3Point.showCount()           // this指的是子类D3Point

      非静态方法,  this代表的是类的实例对象
      静态方法,    this代表的是类

   4) super的用法
      非静态方法   new D3Point(1,2,3).draw()                        // super指的是父类的原型对象Point.prototype
      静态方法     D3Point.d3Count()                                // super指的是父类Point

     非静态方法   console.log(super.x)                              // 会显示undefined,
                                                                      因为super指代的是父类的原型对象
                                                                      而x定义在实例对象上