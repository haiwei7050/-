1 nodejs 如何加载模块
 // a.js
 const moduleA = require("moduleA的名字") // moduleA不是nodejs自带的模块
 nodejs按照下面算法来寻找moduleA
 1) 从 <当前目录> 一直搜寻到 <根目录>，逐层在每级目录下的 <node_modules> 目录下寻找要加载的模块
 2) 如果设置了环境变量NODE_PATH, 则到其指定的目录下寻找,否则直接按 第 3) 步寻找
 3) 到下列目录去寻找
    ~/.node_modules
    ~/.node_libraries
    $PREFIX/lib/node  // $PREFIX 是 npm config ls -l | grep prefix的值
  
  参考链接: https://nodejs.org/docs/latest-v12.x/api/modules.html#modules_loading_from_node_modules_folders

2 npm的配置文件有4个
  项目级别 /path/to/yourproject/.npmrc
  用户级别 ~/.npmrc
  全局级别 $PREFIX/etc/npmrc             // $PREFIX 是 npm config ls -l | grep prefix的值
  npm代码中 
  
  npm config set key value               // 设置的是 ~/.npmrc
  npm config set key value -g|--global   // 设置的是 $PREFIX/etc/npmrc
  
  npm config ls -l 会按上面的顺序打印所有配置项(注意如果没有配过则不会打印)
  
  参考链接: https://stackoverflow.com/questions/51330735/npm-config-global-vs-local
 
 3 npm install如何安装软件的
   1) npm install
      必须在项目目录下执行(包含package.json的目录), 下载package.json指定的所有依赖到/path/to/yourproject/node_modules去
   
   2) npm install @angular/cli                 // 本地安装
      a 确定安装目录: 从 <当前目录> 一直搜寻到 <根目录>，找到第一个包含 node_modules或package.json文件的目录, 如果没有就设定为当前目录
      b 下载并安装模块到 步骤a确定的 <安装目录>/node_modules, 
        并将 模块的package.json中bin字段指定的命安装到<安装目录>/node_modules/.bin/目录下
   
   3) npm install @angular/cli -g|--global    // 全局安装
      下载并安装目录到  $PREFIX/lib/node_modules中去,  $PREFIX 是 npm config ls -l | grep prefix的值
      
   参考链接: npm install 算法 
             https://docs.npmjs.com/configuring-npm/folders#more-information
             npm install 对 package.json 中bin字段的处理
             https://docs.npmjs.com/files/package.json#bin
  
  4 npm切换为阿里源
    1) 请用 cnpm 替换 npm
       npm install -g cnpm --registry=https://registry.npm.taobao.org
    2) ！！！ 一定要注意不要直接替换 npm默认的registry为淘宝源https://registry.npm.taobao.org ！！！
       因为npm从阿里源下一些包时会下不到，从而间接导致一些问题，比如安装angular cli并创建一个全新的项目，就会报错
       npm config set registry https://registry.npm.taobao.org 
       npm install -g @angular/cli                             // npm 切换到阿里源后可以正确的下载 angular/cli
       ng new test-project                                     // 这步会报找不到angular cli的某个module

        下面是如何正确使用阿里源的操作
        npm install -g cnpm --registry=https://registry.npm.taobao.org
        cnpm install -g @angular/cli
        ng config -g cli.packageManager cnpm                     // 这步是将angular cli默认的包管理工具,从npm切换为cnpm
        ng new test-project
    
        也可以这样操作
        npm install -g cnpm --registry=https://registry.npm.taobao.org
        cnpm install -g @angular/cli
        ng new test-project --skip-install                    // 这步在创建默认项目时不去下载依赖
        cd test-project
        cnpm install    
  
  5 常用命令
    cnpm|npm ll -g -depth=0                  // npm查看全局安装了哪些模块
    
    cnpm|npm uninstall -g moduleName && \    // 删除全局安装的模块
    npm cache clean --force
    
    npm show moduleName versions             // 查看module的所有版本 
    yarn global list                         // yarn查看全局安装了哪些模块
    
    yarn global list                         // yarn查看全局安装了哪些模块
    
    ng new 项目名称 --skipGit=true           // ng新建angular项目时不需要初始化git
    
  6 yarn的安装及设置阿里源
    1) 安装
      npm install -g yarn@1.22.4 --registry=https://registry.npm.taobao.org
    2) 换阿里源(注意必须同时更换npm的源也为阿里源,yarn才能正确的切换到阿里源)
      
      先换npm的源为阿里源
      npm config set registry https://registry.npm.taobao.org 
      npm set sass_binary_site https://npm.taobao.org/mirrors/node-sass
      npm set electron_mirror https://npm.taobao.org/mirrors/electron/
      npm set puppeteer_download_host https://npm.taobao.org/mirrors
      npm set chromedriver_cdnurl https://npm.taobao.org/mirrors/chromedriver
      
      再换yarn的源
      yarn config set registry https://registry.npm.taobao.org
      yarn config set disturl https://npm.taobao.org/dist
 
   7 yarn 的配置文件
     yarn config set key value
     yarn config set key value -g|--global
     都只操作一个配置文件: 请执行这个命令 find / -name '.yarnrc' -type f
   
   8 更换angular/cli的包管理工具
     ng config -g cli.packageManager cnpm   // 更换为阿里的cnpm
     ng config -g cli.packageManager yarn   // 跟换为yarn
     ng set --global packageManager=yarn    // 这个是angular-cli 1.7时的设置方法, 上面是angular 6及以后版本的设置方法
   9 angular引用lib
     1) 没提供npm包
        a 把lib.js放到 /path/to/project/src/asserts目录下
        b 在/path/to/project/src/index.html中加入<script>标签
        c <script>标签这样写 <script src='assert/lib.js'></script>
        d 根据lib.js的export方式确定如何引入
          d1) CommonJS export
              //下面是lib.js的内容
              module.exports = function (msg){
                 alert(msg);
              }
          d2) ES6 export
              //下面是lib.js的内容
              export function log(msg){
                 alert(msg);
              }
          d3) 没有导出方式
              //下面是lib.js的内容
              function log(msg){
                 alert(msg);
              }
          f 组件里如何引用
            f1) 编写lib说明文件
                vi /path/to/project/src/app/lib.d.ts  
                
                // lib.d.ts的内容
                   declare function log(msg: string): void;  //当采用的是 d3)(没有导出方式)时, 写到这里就行
                   export = log;                             //当采用的是 d1)(CommonJS export)时, 必须这样export
                   export {log};                             //当采用的是 d2)(ES6 export)时, 必须这样export
                   
            f2) 在*.component.ts中引用
                import * as log from '../asserts/lib';      //当采用的是 d1)(CommonJS export)时, 必须这样import
                import {log} from '../asserts/lib';         //当采用的是 d2)(ES6 export)时, 必须这样import
                                                            // 当采用的是 d3)(没有导出方式)时, 必须 不写import
                class AComponent{
                   constructor(){
                     log('CommonJS export');
                   }
                }
                
     2) 提供npm包
        具体怎么引入看下面 2)提供了npm包, 我这里只想让注意的是 import .. from中from的写法
        1) 没提供npm包的lib, 我们是把他们放到 /path/to/project/src/asserts目录下,所以引用要写成
           import .. from '../asserts/lib.js'
        2) 而提供了npm包的lib会被直接安装到 /path/to/project/node_modules目录下,所以引用要写成
           import .. from 'lib'          // 这里使用了node如何加载module的处理方法,请看最上面 
                                         // 1 nodejs 如何加载模块  
   10 angular中怎么引用纯js写的lib
     1) 没有提供npm包
        a 把lib.js放到 /path/to/project/src/asserts目录下
        b 在/path/to/project/src/index.html中加入<script>标签
        c <script>标签这样写 <script src='assert/lib.js'></script>
        d 引入lib的说明文件
          d1 提供了说明文件(@types/lib)
              cd /path/to/project
              yarn add @types/lib
              
        f 在组件中引用 (即在*.component.ts中引用)
          import * as log from 'lib';   //这里的import方式由@types/lib的export方式决定, export的方式可以参考下面链接
          class LoginComponent{
             constructor(){
               log('使用lib中的log方法');
             }
          }
          d2 自己写说明文件
             cd /path/to/project/src/app
             vi lib.d.ts
             declare function log(msg: string): void; // lib.d.ts的内容
             
        f 在组件中引用 (即在*.component.ts中引用)
          class LoginComponent{
             constructor(){
               log('使用lib中的log方法');            //不需要写import直接就能用
             }                                      //这是因为d2步写的声明文件,采用了全局变量的export方式
          }                                         //具体请参考下面链接
          
     2) 提供了npm包
        2.1) lib的结构
             - lib
                  - package.json
                  - index.js
         2.1.a) index.js采用CommonJS方式export
                module.exports = function (msg){
                   alert(msg);
                }
                
         2.1.b) index.js采用ES6方式export
                exports function log (msg){
                   alert(msg);
                }
         2.2)安装
           a) cd /path/to/project && yarn add lib
           b)引入lib的说明文件
             b1) 提供了说明文件(@types/lib)
                cd /path/to/project
                yarn add @types/lib
             b2) 自己写说明文件
                 cd /path/to/project/src/app
                 vi lib.d.ts
                   // lib.d.ts的内容
                   declare function log(msg: string): void;
                   export = log;       //当采用的是 2.1.a)(CommonJS方式的export), 必须这样export,具体可以看链接
                   export {log};       //当采用的是 2.1.b)(ES6方式export), 必须这样export,具体可以看链接
           c) 在组件中引用 (即在*.component.ts中引用)
              import * as log from 'lib';   //当采用的是 2.1.a)(CommonJS方式的export), 必须这样import,具体可以看链接
              import {log} from 'lib';      //当采用的是 2.1.b)(ES6方式export), 必须这样import,具体可以看链接
              class LoginComponent{
                 constructor(){
                    log('使用lib中的log方法');
                  }
              }
     参考链接:
      typescript声明文档和import export方式的参考
      https://ts.xcatliu.com/basics/declaration-files#quan-ju-bian-liang
      
11 npx的使用
  npx http-server /path/to/project 
  1) 会在node_modules/.bin及PATH中寻找http-serve, 并使用.
  2) 如果没有找到就会去下载http-server并使用
  3) npx --no-install http-server 只会使用本地的http-server,如果没找到就报错
