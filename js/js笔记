1、prototype与[[prototype]]
  a、Function与Boolean、Number一样都是Object的子类
  
  b、var A = function(){};
     相当于生成了一个Function的实例对象
  
  c、prototype是Function特有的一个属性，所以（！！ Function 特有的  ！！）

     {}.prototype                 // undefined  {}类似new Object()
     new Number(1).prototype      // undefined
     new Boolean(true).prototype  // undefined
     
     function g(){}
     g.prototype                  // 不是undefined

     var f = function (){};
         f.prototype              // 不是undefined, 这个对象是js引擎自动生成的

  d、[[prototype]]是每个对象都有  (!! 所有对象都有 ！！)

     当你使用下列语法创建对象时

     function Car(){              // 这是Function的一个实例，它有prototype属性

     }

     var car1 = new Car();       // 当使用 <new 构造函数()>创建对象时
                                 // car1会有一个属性 [[prototype]]
                                 // 这个属性的指向的就是 构造函数的 prototype

     Object.getPrototypeOf(car1) === Car.prototype   // true

     // 属性 [[prototype]] 不能直接访问，必须通过Object.getPrototypeOf(）才能访问
     // 属性 [[prototype]] 所有对象都有
     // 属性 prototype 可以直接访问，且只有Function的对象实例才有
        
        下面有两个函数，名字为A和B，它们都是Function的对象实例，只有它们才有属性prototype，
        而通过它们构建的对象则没有属性prototype，而有属性[[prototype]]

        function A(){}  // 有属性prototype
        new A()         // 没有属性prototype 有属性[[prototype]] 它指向prototype指向的对象

        var B = function (){} //有属性 prototype
        new B()         // 没有属性prototype 有属性[[prototype]] 它指向prototype指向的对象

2、instanceof怎么用
   
   function P(){
	
   }
   var p1 = new P();
   
   console.log(Object.getPrototypeOf(p1) === P.prototype);     // true
   console.log(p1 instanceof P);                               // true

   P.prototype = {}                            

   console.log(Object.getPrototypeOf(p1) === P.prototype);     // false
   console.log(p1 instanceof P);                               // false

   // 下面两个为false是因为，
     obj instanceof Object
     等价于
     Object.getPrototypeOf(p1) === P.prototype
     而Object.getPrototypeOf(p1) 最初等于 P.prototype
     而我们中途令P.prototype指向了一个新对象


