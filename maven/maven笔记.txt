1、dependencyManagement中scope为import的意义
   https://stackoverflow.com/questions/11778276/what-is-the-difference-between-scope-import-and-pom-type-dependency

2、maven supper pom 位置
   maven-model-builder-3.5.4.jar   \org\apache\maven\model\pom-4.0.0.xml

3、maven 三个生命周期定义的位置
   maven-core-3.5.4.jar            \META-INF\plexus\components.xml
   http://maven.apache.org/ref/3.5.2/maven-core/lifecycles.html

4、maven每个生命周期的各个阶段，默认绑定的插件定义在
   maven-core-3.5.4.jar            \META-INF\plexus\default-bindings.xml
   http://maven.apache.org/ref/3.5.2/maven-core/default-bindings.html

5、maven 官方参考文档
   pom文件详解：http://maven.apache.org/pom.html
   插件详解:    http://maven.apache.org/pom.html#Plugins (先看这里)
                http://maven.apache.org/guides/mini/guide-configuring-plugins.html

   插件解绑:    
    重绑定到其它阶段(搜rebind)  http://maven.apache.org/guides/mini/guide-configuring-plugins.html
    绑定到none                  https://stackoverflow.com/questions/15249345/disable-phases-in-maven-lifecycle
                

6、maven的生命周期
   生命周期由phase组成，共三个生命周期 default Lifecycle、clean Lifecycle 、site Lifecycle

   default:
      validate
      initialize
      generate-sources
      process-sources           
      generate-resources
    * process-resources         maven-resources-plugin:2.6:resources
    * compile                   maven-compiler-plugin:3.1:compile
      process-classes
      generate-test-sources
      process-test-sources      
      generate-test-resources
    * process-test-resources    maven-resources-plugin:2.6:testResources
    * test-compile              maven-compiler-plugin:3.1:testCompile
      process-test-classes
    * test                      maven-surefire-plugin:2.12.4:test
      prepare-package
    * package                   maven-jar-plugin:2.4:jar
      pre-integration-test
      integration-test
      post-integration-test
      verify
    * install                   maven-install-plugin:2.4:install
    * deploy                    maven-deploy-plugin:2.7:deploy

   clean:
      pre-clean
   *  clean                     maven-clean-plugin:2.5:clean
      post-clean

   site:
     pre-site
   * site                       maven-site-plugin:3.3:site
     post-site
   * site-deploy                maven-site-plugin:3.3:deploy

7a、mvn 语法
   通过 mvn --help可知 mvn后可以跟 goal 或 phase
   
   a、phase的情况
      mvn clean test
   
   b、goal的情况
      mvn groupId:artifactId:version:goal
      mvn groupId:artifactId:goal
      mvn prefix:goal
      https://stackoverflow.com/questions/30833919/what-is-the-syntax-to-run-a-maven-plugin-from-the-command-line

7b、mvn prefix:goal这种是怎么运行的
   
   prefix会被maven映射为groupId:artifactId，映射的方法是:
   
   1、通过当前项目的pom.xml文件进行映射
      
      a、下载pom.xml中的所有插件(<pluginManagement> 和 <plugins>)
      
      b、根据下面方式，抽取 prefix --> groupId:artifactId 的映射关系         
	 
	 模式                    例子 
                                         artifactId               prefix
	 maven-{prefix}-plugins  maven-compiler-plugin    --->    compiler
         
	 {prefix}-maven-plugins  spring-boot-maven-plugin --->    spring-boot

      c、用步骤b抽取的映射关系进行匹配，如果成功就返回，否则执行步骤2

   2、通过maven-metadata.xml进行映射
      a、确定需要下载哪些groupId下的maven-metadata.xml文件
         
	 setting.xml通过下面的标签，来确定下载哪些groupId下的maven-metadata.xml文件

	 <pluginGroups>
            <pluginGroup>插件的groupId</pluginGroup>
         </pluginGroups>
         
	 默认需要下载 org.apache.maven.plugins、org.codehaus.mojo下的插件的maven-metadata.xml文件
	     

      b、具体的下载步骤
         Downloaded from <仓库名字>: https://repo.maven.apache.org/maven2/     <groupId>         /maven-metadata.xml
         Downloaded from central_backup: https://repo.maven.apache.org/maven2/<org/codehaus/mojo>/maven-metadata.xml

         并将下好的 
	    maven-metadata.xml 
	 重命名为 
	   maven-metadata-仓库名.xml
	 保存到
	   ~/.m2/repository/<groupId>

        其中groupId为 步骤a <pluginGroups>中配置的 groupId，和两个默认的 org.apache.maven.plugins、org.codehaus.mojo.
  
      c、查看maven-metadata.xml，里面有prefix 和 artifactId的对应关系，然后再对应maven-metadata.xml位于哪个groupId下
         即可得到 prefix ----> groupId:artifactId
  
  prefix有个约定
  maven官方插件的的artifactId: maven-prefix-plugins
  第三方的artifactId:          prefix-maven-plugins
  
  参考资料
  https://stackoverflow.com/questions/40205664/how-does-maven-plugin-prefix-resolution-work-why-is-it-resolving-findbugs-but
  https://maven.apache.org/guides/introduction/introduction-to-plugin-prefix-mapping.html

7c mvn phase和mvn goal是怎么运行的
   
   a、mvn phase怎么运行
      mvn test会运行test之前的所有phase，如validate、compile、test-compile等等
      而所谓运行phase就是运行所有绑定在该phase上的plugin的goal
         
   b、mvn goal怎么运行
      1)读取当前项目的pom.xml中对该插件的全局配置
      2)和<id>为default-cli的配置，
      3)然后执行该goal
<groupId>org.codehaus.mojo</groupId>
<artifactId>exec-maven-plugin</artifactId>
<version>1.6.0</version>
<executions>
  <execution>
  <id>default-cli</id>
  <goals>
    <goal>exec</goal>
  </goals>
  <phase>test</phase>
  <configuration>
    <executable>echo</executable>
    <commandlineArgs>hello world</commandlineArgs>
  </configuration>
 </execution>
</executions>
mvn exec:exec //输出 hello world



   参考链接: https://stackoverflow.com/questions/16205778/what-are-maven-goals-and-phases-and-what-is-their-difference
           https://stackoverflow.com/questions/34590452/what-is-the-implicit-id-of-a-maven-plugin-execution
  
8、maven的pom继承
   
   a、合并
      <properties>
      <dependencys>
      <plugins>

   b、覆盖
      <resources>
      

   c、合并是指
      parent的定义会和child的定义合并，结果为二者的合集

   d、覆盖是指
      1、当parent定义了，但child没有定义，则以parent定义的为准
         parent
            <project>
	 	<build>
	          <resources>
                   <resource>
                     <directory>parent</directory>
                   </resource>
                  </resources>
	        </build>
             </project>
	 
	  child 无
	  
	  结果
            <project>
	 	<build>
	          <resources>
                   <resource>
                     <directory>parent</directory>
                   </resource>
                  </resources>
	        </build>
             </project>

      2、当parent定义了，且child也定义了，则child的定义覆盖parent的定义

         parent
            <project>
	 	<build>
	          <resources>
                   <resource>
                     <directory>parent</directory>
                   </resource>
                  </resources>
	        </build>
             </project>
	 
	  child 
            <project>
	 	<build>
	          <resources>
                   <resource>
                     <directory>child</directory>
                   </resource>
                  </resources>
	        </build>
             </project>	  
	  结果
            <project>
	 	<build>
	          <resources>
                   <resource>
                     <directory>child</directory>
                   </resource>
                  </resources>
	        </build>
             </project>

9、maven <build>下<plugin>默认的结构为
 <project>
  <build>
    ...
    <plugins>
      <plugin>
        groupId
        artifactId
        version
        extensions
        inherited
        configuration
        dependencies
        executions
      </plugin>
    </plugins>
  </build>
</project>
  具体看 https://maven.apache.org/pom.html#Plugins

10、maven plugin详解请看
    http://maven.apache.org/guides/mini/guide-configuring-plugins.html

    maven plugin由goal组成，goal只有绑定到phase才会被执行，一般通过配置
    
    <project>
      <build>
        <plugins>
	  <plugin>
	    ######### 通过配置下面这个，来绑定goal到某个phase #########
            <executions>
	      <execution>
	        <goals>
		    <goal></goal>
		</goals>
		<phase></phase>
	       <exectuion>
	    </executions>

       若没有写<phase>，goal会绑定到其默认的phase，若没有，则goal不会执行，下面就是个完整的例子，
       这个例子在上面的网页中(搜下面的那段话)

<project>
  ...
  <build>
    <plugins>
      <plugin>
        <artifactId>maven-myquery-plugin</artifactId>
        <version>1.0</version>
        <executions>
          <execution>
            <id>execution1</id>
            <phase>test</phase>
            <configuration>
              <url>http://www.foo.com/query</url>
              <timeout>10</timeout>
              <options>
                <option>one</option>
                <option>two</option>
                <option>three</option>
              </options>
            </configuration>
            <goals>
              <goal>query</goal>
            </goals>
          </execution>
          <execution>
            <id>execution2</id>
            <configuration>
              <url>http://www.bar.com/query</url>
              <timeout>15</timeout>
              <options>
                <option>four</option>
                <option>five</option>
                <option>six</option>
              </options>
            </configuration>
            <goals>
              <goal>query</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
  ...
</project>


    它有一段话：
      The first execution with id "execution1" binds this configuration to the test phase. The second execution does not have a <phase> tag, how do you think will this execution behave? Well, goals can have a default phase binding as discussed further below. If the goal has a default phase binding then it will execute in that phase. But if the goal is not bound to any lifecycle phase then it simply won't be executed during the build lifecycle

11、maven对pom的处理流程
   a. maven会把super pom的内容和项目的pom文件进行合并
   b. maven会把三个生命周期各个phase都绑定到对应的插件上
      通过下面的方法绑定
      <project>
        <build>
	  <plugins>
	    <plugin>
	        <groupId></groupId>
                <artifactId></artifactId>
                <version></version>
               [-------->
		<executions>
		  <execution>
		    <goals></goals>
		    <phase></phase>
		  </execution>
		</executions>
                -------->]
	    </plugin>
	  </plugins>
	</build>
      </project>

   c、验证上述说法方法

   1、新建一个最小的pom
   <?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.tdr</groupId>
    <artifactId>bbs</artifactId>
    <version>1.0-SNAPSHOT</version>
</project>
  
  2、mvn help:effective-pom

12 maven 如何解析dependency
  按照下面三个规则依次进行解析,
  当第1)步解析不了时, 
  使用第2)步来解析, 
  *** 3)步会优先级最高会覆盖1),2)步解析的结果 ***
  1) 最近原则
    假设我们的项目叫 P1, 有以下依赖关系
    P1 -> A -> B -> D(1.0)
    P1 -> C -> D(2.0)
    P1最终会依赖D(2.0), 因为P1通过依赖C到依赖D的距离最短, 为2, 而通过依赖A到依赖D的距离为3
    
  2) 最前原则
    假设我们的项目叫 P1, 有以下依赖关系
    P1 -> A -> D(1.0)
    P1 -> C -> D(2.0)
    P1依赖哪个版本的D,由依赖A,C在项目P1的pom.xml定义的顺序决定, 靠前的会覆盖靠后的
    
    P1               P1最终会依赖D(1.0), 因为A定义在C前面 
      --A
      --C
      
  3) 当前原则
     当项目P1的pom.xml直接定义依赖D时,它会覆盖依赖A 和 依赖 C中的定义, 无论在什么位置
     
     P1                  P1最终会依赖D(0.9), 无论位置
       --A -> D(1.0)
       --C -> D(2.0)
       --D(0.9)
       
     P1                  P1最终会依赖D(0.9), 无论位置
       --A -> D(1.0)
       --D(0.9)
       --C -> D(2.0)
       
     P1                  P1最终会依赖D(0.9), 无论位置
       --D(0.9)
       --A -> D(1.0)
       --C -> D(2.0)
       
   4) dependencyManagement中也适用上述规则
      项目P1
        <dependencyManagement>
	   <dependencies>
             <dependency>
	        <groupId>A</groupId>
                 <artifactId>A</artifactId>
                 <version>1.0</version>
		 <type>pom</type>                    // type默认是jar,一般可以省略不写
		                                     // 但是,项目A和项目B的packageing是pom,所以要写<type>并且值为pom
						     
                 <scope>import</scope>               // <scope>写成import表明, 把这里A的信息
		                                     // 都替换为项目A的<dependencyManagement>中定义的内容
	     </dependency>
           </dependencies>
	</dependencyManagement>
      项目A
          <groupId>A</groupId>
          <artifactId>A</artifactId>
          <version>1.0</version>
	  <packaging>pom</packaging>
	  <dependencyManagement>
	   <dependencies>
             <dependency>
	         D:1.0
	     </dependency>
           </dependencies>
	</dependencyManagement>
      项目C
          <groupId>C</groupId>
          <artifactId>C</artifactId>
          <version>1.0</version>
	  <packaging>pom</packaging>
	  <dependencyManagement>
	   <dependencies>
             <dependency>
	         D:2.0
	     </dependency>
           </dependencies>
	</dependencyManagement>
     
    4.1) 假如在P1的dependencyManagement, 这样定义
         P1               P1最终会依赖D(1.0), 因为A定义在C前面 
           --A
           --C
    4.2) 假如在P1的dependencyManagement, 这样定义
         P1               P1最终会依赖D(0.9), 无论位置
           --A
           --C
           --D(0.9)
