1 泛型基本知识
  class Parent{}
  class Sub1 extend Parent{}
  class Sub2 extend Parent{}

  1) List<Parent> arr = new ArrayList<Parent>();
     arr.put(new Parent());                      // ok

     arr.put(new Sub1());                        // 这两个都ok，是因为List<Parent>规定了  
     arr.put(new Sub2());                        // arr里面只能放 Parent, 而Sub1和Sub2
                                                 // 是一个Parent(有继承关系)

  2) List<Parent> arr = new Array<Sub1>();      //error, 因为泛型没有继承关系

参考链接:https://www.jianshu.com/p/ddbe1db509da
  

2 PECS(Producer extends and Consumer super)
  1) 你有个方法，方法要对泛型集合进行操作
      
     ------------------------- ? extend 只从方法参数的集合中取数据
      void pop(List<? extend Parent> list){     
          Parent a = list.get(0);               //  这步ok
          list.add(a);                          //  这步error，因为 ? extend意味着只能取数据

          Sub1 b =  list.get(0);                //  这步不行，取出的数据的类型必须为extend右边的类型
                                                //  这里为 Parent
      }
      List<Sub1> sub1List = Arrays.asList(new Sub1());

      pop(sub1List);                             

    -------------------------? super 只向方法参数的集合中放数据
     
     void push(List<? supper Sub1> list){     
          list.put(new Sub1());              // 这步ok
          list.put(new Parent());            // 这步不行, 放到集合里的数据的类型必须为extend右边的类型
                                             // 这里是 Sub1
     }

     List<Parent> container = new ArrayList();
     push(container);



3、recursive type parameter的作用
   https://www.jyt0532.com/2018/12/23/t-extends-comparable-questionmark-super-t/

    
